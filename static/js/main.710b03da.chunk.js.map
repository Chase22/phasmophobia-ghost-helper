{"version":3,"sources":["components/ghost-grid/GhostGrid.module.css","components/footer/Footer.module.css","components/help-dialog/HelpDialog.module.css","data/Ghost.ts","components/multistate-button/MultiStateButton.tsx","data/Evidence.ts","components/ghost-grid/GhostGrid.tsx","components/footer/Footer.tsx","components/help-dialog/HelpDialog.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","ghosts","name","evidence","MultiStateButton","props","Button","size","onClick","states","currentState","content","evidences","buttonStates","key","GhostGrid","onHelpButton","defaultState","useState","evidenceStates","setEvidenceStates","renderedGhost","map","ghost","active","evidenceIndex","includes","Table","TableHead","className","styles","Header","TableRow","TableCell","align","ButtonCell","IconButton","color","variant","value","EvidenceHeaderCell","replaceAll","aria-label","prevState","length","TableBody","sort","a","b","localeCompare","TableRowInactive","console","log","GhostRow","Footer","footer","footerLink","href","HelpDialog","open","onClose","Dialog","fullWidth","helpHeader","helpContent","App","helpDialogOpen","setHelpDialogOpen","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.710b03da.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"GhostGrid_Header__tRL0g\",\"TableRowInactive\":\"GhostGrid_TableRowInactive__3HnOG\",\"EvidenceHeaderCell\":\"GhostGrid_EvidenceHeaderCell__2SsJJ\",\"ButtonCell\":\"GhostGrid_ButtonCell__2EtAk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__BKhgK\",\"footerLink\":\"Footer_footerLink__36PyT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"helpHeader\":\"HelpDialog_helpHeader__pLYKd\",\"helpContent\":\"HelpDialog_helpContent__bO1hG\"};","import {Evidence} from \"./Evidence\";\n\nexport interface Ghost {\n    name: string,\n    evidence: Array<Evidence>\n}\n\nconst ghosts: Array<Ghost> = [\n    {name: \"Demon\", evidence: [\"SPIRIT_BOX\", \"FREEZING_TEMPERATURE\", \"GHOST_WRITING\"]},\n    {name: \"Banshee\", evidence: [\"FINGERPRINTS\", \"EMF_LEVEL_5\", \"FREEZING_TEMPERATURE\"]},\n    {name: \"Spirit\", evidence: [\"SPIRIT_BOX\", \"FINGERPRINTS\", \"GHOST_WRITING\"]},\n    {name: \"Wraith\", evidence: [\"SPIRIT_BOX\", \"FINGERPRINTS\", \"FREEZING_TEMPERATURE\"]},\n    {name: \"Phantom\", evidence: [\"GHOST_ORB\", \"EMF_LEVEL_5\", \"FREEZING_TEMPERATURE\"]},\n    {name: \"Poltergeist\", evidence: [\"GHOST_ORB\", \"SPIRIT_BOX\", \"FINGERPRINTS\"]},\n    {name: \"Jinn\", evidence: [\"GHOST_ORB\", \"SPIRIT_BOX\", \"FREEZING_TEMPERATURE\"]},\n    {name: \"Mare\", evidence: [\"GHOST_ORB\", \"SPIRIT_BOX\", \"FREEZING_TEMPERATURE\"]},\n    {name: \"Revenant\", evidence: [\"FINGERPRINTS\", \"EMF_LEVEL_5\", \"GHOST_WRITING\"]},\n    {name: \"Shade\", evidence: [\"GHOST_ORB\", \"EMF_LEVEL_5\", \"GHOST_WRITING\"]},\n    {name: \"Yurei\", evidence: [\"GHOST_ORB\", \"FREEZING_TEMPERATURE\", \"GHOST_WRITING\"]},\n    {name: \"Oni\", evidence: [\"SPIRIT_BOX\", \"EMF_LEVEL_5\", \"GHOST_WRITING\"]},\n]\n\nexport default ghosts\n","import React from \"react\";\nimport {Button} from \"@material-ui/core\";\n\nexport interface MultiStateButtonState {\n    key: string\n    content?: JSX.Element\n}\n\nexport interface MultiStateButtonProps {\n    currentState: number\n    states: Array<MultiStateButtonState>\n    onClick: () => void\n}\n\nexport default function MultiStateButton(props: MultiStateButtonProps) {\n    return (\n        <Button size=\"large\" onClick={props.onClick}>\n            {props.states[props.currentState].content}\n        </Button>\n    )\n}\n","export type Evidence = \"FREEZING_TEMPERATURE\" | \"SPIRIT_BOX\" | \"GHOST_ORB\" | \"FINGERPRINTS\" | \"EMF_LEVEL_5\" | \"GHOST_WRITING\"\n\nexport const evidences: Array<Evidence> = [\n    \"EMF_LEVEL_5\", \"FINGERPRINTS\", \"FREEZING_TEMPERATURE\", \"GHOST_ORB\", \"GHOST_WRITING\", \"SPIRIT_BOX\"\n]\n","import {Button, IconButton, Table, TableBody, TableCell, TableHead, TableRow} from \"@material-ui/core\";\nimport React, {useState} from \"react\";\nimport ghosts, {Ghost} from \"../../data/Ghost\";\nimport styles from './GhostGrid.module.css';\nimport MultiStateButton, {MultiStateButtonState} from \"../multistate-button/MultiStateButton\";\nimport CheckIcon from '@material-ui/icons/Check';\nimport CloseIcon from '@material-ui/icons/Close';\nimport HelpIcon from '@material-ui/icons/Help';\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\nimport {Evidence, evidences} from \"../../data/Evidence\";\n\nconst buttonStates: Array<MultiStateButtonState> = [\n    {key: \"unknown\", content: <RadioButtonUncheckedIcon/>},\n    {key: \"found\", content: <CheckIcon/>},\n    {key: \"not-found\", content: <CloseIcon/>},\n]\n\ntype GhostGridState = {\n    [key in Evidence]: number;\n};\n\ninterface GhostGridProps {\n    onHelpButton: () => void\n}\n\nexport default function GhostGrid(props: GhostGridProps) {\n    const {onHelpButton} = props;\n\n    const defaultState = {\n        \"GHOST_WRITING\": 0,\n        \"SPIRIT_BOX\": 0,\n        \"FREEZING_TEMPERATURE\": 0,\n        \"GHOST_ORB\": 0,\n        \"FINGERPRINTS\": 0,\n        \"EMF_LEVEL_5\": 0,\n    };\n    const [evidenceStates, setEvidenceStates] = useState<GhostGridState>(defaultState)\n\n    const renderedGhost: Array<Ghost & { active: boolean }> = ghosts.map(ghost => {\n        let active = true;\n        for (const evidenceIndex in evidences) {\n            const evidence: Evidence = evidences[evidenceIndex];\n\n            if (evidenceStates[evidence] === 1 && !ghost.evidence.includes(evidence)) {\n                active = false\n            }\n            if (evidenceStates[evidence] === 2 && ghost.evidence.includes(evidence)) {\n                active = false\n            }\n        }\n        return {name: ghost.name, evidence: ghost.evidence, active: active}\n    })\n\n    return (\n        <>\n            <Table>\n                <TableHead className={styles.Header}>\n                    <TableRow>\n                        <TableCell align=\"center\">\n                            <div className={styles.ButtonCell}>\n                                <IconButton onClick={onHelpButton}><HelpIcon/></IconButton>\n                                <Button color=\"secondary\"\n                                        size=\"large\"\n                                        variant=\"outlined\"\n                                        onClick={() => setEvidenceStates(defaultState)}>Reset</Button>\n                            </div>\n                        </TableCell>\n                        {evidences.map(value => (\n                            <TableCell align=\"center\">\n                                <div className={styles.EvidenceHeaderCell}>\n                                    {value.replaceAll(\"_\", \" \")}\n                                    <MultiStateButton\n                                        aria-label={value.replaceAll(\"_\", \" \")}\n                                        currentState={evidenceStates[value]}\n                                        states={buttonStates}\n                                        onClick={() => setEvidenceStates(prevState => {\n                                            prevState[value] = prevState[value] + 1\n                                            if (prevState[value] >= buttonStates.length) {\n                                                prevState[value] = 0\n                                            }\n                                            return {...prevState}\n                                        })}\n                                    />\n                                </div>\n                            </TableCell>\n                        ))}\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {renderedGhost\n                        .sort((a, b) => a.name.localeCompare(b.name))\n                        .sort((a, b) => (a.active === b.active) ? 0 : a.active ? -1 : 1)\n                        .map(ghost => GhostRow(ghost))\n                    }\n                </TableBody>\n            </Table>\n        </>\n    )\n}\n\n\nfunction GhostRow(ghost: Ghost & { active: boolean }): JSX.Element {\n    const className = ghost.active ? \"\" : styles.TableRowInactive\n    console.log(className)\n    return (\n        <TableRow className={`${className}`}>\n            <TableCell align=\"center\">{ghost.name}</TableCell>\n            {evidences.map(value =>\n                <TableCell align=\"center\">\n                    {ghost.evidence.includes(value) ? \"X\" : \"\"}\n                </TableCell>)}\n        </TableRow>\n    )\n}\n","import React from \"react\";\nimport styles from \"./Footer.module.css\"\n\nexport default function Footer() {\n    return (\n        <footer className={styles.footer}>\n                <a className={styles.footerLink} href=\"https://github.com/Chase22/phasmophobia-ghost-helper\">GitHub</a>\n                <a className={styles.footerLink} href=\"https://github.com/Chase22/phasmophobia-ghost-helper/issues\">Issue Tracker</a>\n        </footer>\n    )\n}\n","import {Dialog, IconButton, Table, TableCell, TableRow} from \"@material-ui/core\";\nimport React from \"react\";\nimport styles from \"./HelpDialog.module.css\";\nimport CheckIcon from '@material-ui/icons/Check';\nimport CloseIcon from '@material-ui/icons/Close';\nimport RadioButtonUncheckedIcon from \"@material-ui/icons/RadioButtonUnchecked\";\n\nexport interface HelpDialogProps {\n    open: boolean,\n    onClose: () => void\n}\n\nexport default function HelpDialog(props: HelpDialogProps) {\n    const {open, onClose} = props;\n\n    return (\n        <Dialog open={open} fullWidth>\n            <div className={styles.helpHeader}>\n                <h1>Phasmophobia Ghost Helper</h1>\n                <IconButton size=\"medium\" onClick={onClose}><CloseIcon/></IconButton>\n            </div>\n            <article className={styles.helpContent}>\n                <p>In the Table you see all available evidences and each ghost type. Each ghost type has the identifying evidences marked with an 'X'.</p>\n\n                <p>On the top under the evidences to cycle between unknown, found and not found</p>\n                <Table>\n                    <TableRow>\n                        <TableCell><RadioButtonUncheckedIcon/></TableCell>\n                        <TableCell>It is unknown if that evidence is present</TableCell>\n                    </TableRow>\n                    <TableRow>\n                        <TableCell><CheckIcon/></TableCell>\n                        <TableCell>The evidence has been found and can be marked in the journal</TableCell>\n                    </TableRow>\n                    <TableRow>\n                        <TableCell><CloseIcon/></TableCell>\n                        <TableCell>The evidence has not been found and is unlikely to be found (e.g. non-freezing temperatures in the Ghost room)</TableCell>\n                    </TableRow>\n                </Table>\n                <p>A ghost type that is no longer possible under the given setting will be grayed out</p>\n            </article>\n        </Dialog>\n    )\n}\n","import React, {useState} from 'react';\nimport './App.css';\nimport GhostGrid from \"./components/ghost-grid/GhostGrid\";\nimport Footer from \"./components/footer/Footer\";\nimport HelpDialog from \"./components/help-dialog/HelpDialog\";\n\nfunction App() {\n    const [helpDialogOpen, setHelpDialogOpen] = useState(false)\n\n    return (\n        <div className=\"App\">\n            <HelpDialog open={helpDialogOpen} onClose={() => setHelpDialogOpen(false)}/>\n            <main>\n                <GhostGrid onHelpButton={() => setHelpDialogOpen(true)}/>\n            </main>\n            <Footer/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}