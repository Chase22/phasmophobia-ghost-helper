{"version":3,"sources":["components/ghost-grid/GhostGrid.module.css","data/Ghost.ts","components/tristate-button/MultiStateButton.tsx","data/Evidence.ts","components/ghost-grid/GhostGrid.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","ghosts","name","evidence","MultiStateButton","props","Button","size","onClick","states","currentState","content","evidences","buttonStates","key","GhostGrid","defaultState","useState","evidenceStates","setEvidenceStates","renderedGhost","map","ghost","active","evidenceIndex","includes","Table","TableHead","className","classes","Header","TableRow","TableCell","align","color","value","toString","replaceAll","prevState","length","TableBody","sort","a","b","localeCompare","TableRowInactive","console","log","GhostRow","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.31f32e1c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"GhostGrid_Header__tRL0g\",\"TableRowInactive\":\"GhostGrid_TableRowInactive__3HnOG\"};","import {Evidence} from \"./Evidence\";\n\nexport interface Ghost {\n    name: string,\n    evidence: Array<Evidence>\n}\n\nconst ghosts: Array<Ghost> = [\n    {name: \"Demon\", evidence: [\"SPIRIT_BOX\", \"FREEZING_TEMPERATURE\", \"GHOST_WRITING\"]},\n    {name: \"Banshee\", evidence: [\"FINGERPRINTS\", \"EMF_LEVEL_5\", \"FREEZING_TEMPERATURE\"]},\n    {name: \"Spirit\", evidence: [\"SPIRIT_BOX\", \"FINGERPRINTS\", \"GHOST_WRITING\"]},\n    {name: \"Wraith\", evidence: [\"SPIRIT_BOX\", \"FINGERPRINTS\", \"FREEZING_TEMPERATURE\"]},\n    {name: \"Phantom\", evidence: [\"GHOST_ORB\", \"EMF_LEVEL_5\", \"FREEZING_TEMPERATURE\"]},\n    {name: \"Poltergeist\", evidence: [\"GHOST_ORB\", \"SPIRIT_BOX\", \"FINGERPRINTS\"]},\n    {name: \"Jinn\", evidence: [\"GHOST_ORB\", \"SPIRIT_BOX\", \"FREEZING_TEMPERATURE\"]},\n    {name: \"Mare\", evidence: [\"GHOST_ORB\", \"SPIRIT_BOX\", \"FREEZING_TEMPERATURE\"]},\n    {name: \"Revenant\", evidence: [\"FINGERPRINTS\", \"EMF_LEVEL_5\", \"GHOST_WRITING\"]},\n    {name: \"Shade\", evidence: [\"GHOST_ORB\", \"EMF_LEVEL_5\", \"GHOST_WRITING\"]},\n    {name: \"Yurei\", evidence: [\"GHOST_ORB\", \"FREEZING_TEMPERATURE\", \"GHOST_WRITING\"]},\n    {name: \"Oni\", evidence: [\"SPIRIT_BOX\", \"EMF_LEVEL_5\", \"GHOST_WRITING\"]},\n]\n\nexport default ghosts\n","import React from \"react\";\nimport {Button} from \"@material-ui/core\";\n\nexport interface MultiStateButtonState {\n    key: string\n    content?: JSX.Element\n}\n\nexport interface MultiStateButtonProps {\n    currentState: number\n    states: Array<MultiStateButtonState>\n    onClick: () => void\n}\n\nexport default function MultiStateButton(props: MultiStateButtonProps) {\n    return (\n        <Button size=\"large\" onClick={props.onClick}>\n            {props.states[props.currentState].content}\n        </Button>\n    )\n}\n","export type Evidence = \"FREEZING_TEMPERATURE\" | \"SPIRIT_BOX\" | \"GHOST_ORB\" | \"FINGERPRINTS\" | \"EMF_LEVEL_5\" | \"GHOST_WRITING\"\n\nexport const evidences: Array<Evidence> = [\n    \"EMF_LEVEL_5\", \"FINGERPRINTS\", \"FREEZING_TEMPERATURE\", \"GHOST_ORB\", \"GHOST_WRITING\", \"SPIRIT_BOX\"\n]\n","import {Button, Table, TableBody, TableCell, TableHead, TableRow} from \"@material-ui/core\";\nimport React, {useState} from \"react\";\nimport ghosts, {Ghost} from \"../../data/Ghost\";\nimport classes from './GhostGrid.module.css';\nimport MultiStateButton, {MultiStateButtonState} from \"../tristate-button/MultiStateButton\";\nimport CheckIcon from '@material-ui/icons/Check';\nimport CloseIcon from '@material-ui/icons/Close'\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\nimport {Evidence, evidences} from \"../../data/Evidence\";\n\n\nconst buttonStates: Array<MultiStateButtonState> = [\n    {key: \"unknown\", content: <RadioButtonUncheckedIcon/>},\n    {key: \"found\", content: <CheckIcon/>},\n    {key: \"not-found\", content: <CloseIcon/>},\n]\n\ntype GhostGridState = {\n    [key in Evidence]: number;\n};\n\nexport default function GhostGrid() {\n    const defaultState = {\n        \"GHOST_WRITING\": 0,\n        \"SPIRIT_BOX\": 0,\n        \"FREEZING_TEMPERATURE\": 0,\n        \"GHOST_ORB\": 0,\n        \"FINGERPRINTS\": 0,\n        \"EMF_LEVEL_5\": 0,\n    };\n    const [evidenceStates, setEvidenceStates] = useState<GhostGridState>(defaultState)\n\n    const renderedGhost: Array<Ghost & { active: boolean }> = ghosts.map(ghost => {\n        let active = true;\n        for (const evidenceIndex in evidences) {\n            const evidence: Evidence = evidences[evidenceIndex];\n\n            if (evidenceStates[evidence] === 1 && !ghost.evidence.includes(evidence)) {\n                active = false\n            }\n            if (evidenceStates[evidence] === 2 && ghost.evidence.includes(evidence)) {\n                active = false\n            }\n        }\n        return {name: ghost.name, evidence: ghost.evidence, active: active}\n    })\n\n    return (\n        <>\n            <Table>\n                <TableHead className={classes.Header}>\n                    <TableRow>\n                        <TableCell align=\"center\"><Button color=\"primary\" onClick={() => setEvidenceStates(defaultState)}>Reset</Button></TableCell>\n                        {evidences.map(value => (\n                            <TableCell align=\"center\">\n                                {value.toString().replaceAll(\"_\", \" \")}\n                                <MultiStateButton\n                                    currentState={evidenceStates[value]}\n                                    states={buttonStates}\n                                    onClick={() => setEvidenceStates(prevState => {\n                                        prevState[value] = prevState[value] + 1\n                                        if (prevState[value] >= buttonStates.length) {\n                                            prevState[value] = 0\n                                        }\n                                        return {...prevState}\n                                    })}\n                                />\n                            </TableCell>\n                        ))}\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {renderedGhost\n                        .sort((a, b) => a.name.localeCompare(b.name))\n                        .sort((a, b) => (a.active === b.active)? 0 : a.active? -1 : 1)\n                        .map(ghost => GhostRow(ghost))\n                    }\n                </TableBody>\n            </Table>\n        </>\n    )\n}\n\n\nfunction GhostRow(ghost: Ghost & { active: boolean }): JSX.Element {\n    const className = ghost.active ? \"\" : classes.TableRowInactive\n    console.log(className)\n    return (\n        <TableRow className={`${className}`}>\n            <TableCell align=\"center\">{ghost.name}</TableCell>\n            {evidences.map(value =>\n                <TableCell align=\"center\">\n                    {ghost.evidence.includes(value) ? \"X\" : \"\"}\n                </TableCell>)}\n        </TableRow>\n    )\n}\n","import React from 'react';\nimport './App.css';\nimport GhostGrid from \"./components/ghost-grid/GhostGrid\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <GhostGrid/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}